###########################################################################
## Change prefix from default (C-b) to C-g
## C-g doesn't interfere with emacs-style editing keys
#
unbind -n C-b
unbind -n C-a
set -g prefix C-a
#
## C-g C-g to passthrough a C-g
unbind C-a
bind C-a send-key C-a

#urxvt tab like window switching (-n: no prior escape seq)
bind -n S-down new-window
bind -n S-left prev
bind -n S-right next
bind -n C-left swap-window -t -1
bind -n C-right swap-window -t +1 

###########################################################################
## Window management / navigation
#
## move between windows
bind-key C-h previous-window
bind-key C-l next-window
#
## C-\ (no prefix) to skip to last window we were in before this one
bind -n "C-\\" last-window
#
## C-Space (no prefix) to tab to next window
bind -n C-Space next-window

###########################################################################
# General options

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color

# Ring the bell if any background window rang a bell
set -g bell-action any

# Watch for activity in background windows
setw -g monitor-activity on

# scrollback size
set -g history-limit 10000

# set first window to index 1 (not 0) to map more to the keyboard layout
set -g base-index 1
setw -g pane-base-index 1

# pass through xterm keys
set -g xterm-keys on


# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind C-l send-keys 'C-l'


###########################################################################
## Mouse mode is on by default.
## <prefix> M -- to turn it off
## <prefix> m -- to turn it on
##
## As of tmux 2.1, a backward-incompatible change was introduced.
## mode-mouse and mouse-* no longer exist, replaced by simply
## mouse <on|off>. Which is great, and easier, but unfortunately I use
## tmux on systems which I don't foresee going to 2.1+ anytime soon.
## So, time to test versions... this is kind of cheap and hacky, and it
## won't work for 2.2 and beyond, but will work for now. I tried to make
## this more generalized but have not been successful so far.
##
#
if-shell '[[ $(echo "$(tmux -V | cut -d" " -f2) >= 2.1" | bc) -eq 1 ]]' \
    'set -g mouse on; bind m set -g mouse on \; display "Mouse ON"; bind M set -g mouse off \; display "Mouse OFF"' \
    'set -g mode-mouse on; set -g mouse-resize-pane on; set -g mouse-select-pane on; set -g mouse-select-window on; bind m set -g mode-mouse on \; set -g mouse-resize-pane on \; set -g mouse-select-pane on \; set -g mouse-select-window on \; display "Mouse ON"; bind M set -g mode-mouse off \; set -g mouse-resize-pane off \; set -g mouse-select-pane off \; set -g mouse-select-window off \; display "Mouse OFF"'


###########################################################################
# Scrollback / pastebuffer

# Vim-style copy/paste
unbind [
bind y copy-mode
unbind p
bind p paste-buffer
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-selection
bind -t vi-copy Escape cancel


# Use vi keybindings in copy and choice modes
setw -g mode-keys vi
