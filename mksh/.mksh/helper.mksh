#!/usr/bin/mksh

############################################################
# Display non-zero exit status
############################################################
_exit_status() {
  exit_status="$?"
  case $exit_status in
    0) return ;;
    *) printf '(%d) ' "$exit_status" ;;
  esac
}

############################################################
# Emulation of bash's PROMPT_DIRTRIM for other shells
#
# In $PWD, substitute $HOME with ~; if the remainder of the
# $PWD has more than two directory elements to display,
# abbreviate it with '...', e.g.
#
#   $HOME/dotfiles/polyglot/img
#
# will be displayed as
#
#   ~/.../polyglot/img
#
# Arguments
#  $1 Number of directory elements to display
############################################################
_prompt_dirtrim() {
  [ "$1" -lt 1 ] && set 2 # $POLYGLOT_PROMPT_DIRTRIM should not be less than 1
  dir_count=$(echo "${PWD#$HOME}" | awk -F/ '{c += NF - 1} END {print c}')
  if [ "$dir_count" -le "$1" ]; then
      # shellcheck disable=SC2088
      case "$PWD" in
        $HOME*) printf '~%s' "${PWD#$HOME}" ;;
        *) printf '%s' "$PWD" ;;
      esac
  else
    last_two_dirs=$(echo "${PWD#$HOME}" \
      | awk '{ for(i=length();i!=0;i--) x=(x substr($0,i,1))  }{print x;x=""}' \
      | cut -d '/' -f-"$1" \
      | awk '{ for(i=length();i!=0;i--) x=(x substr($0,i,1))  }{print x;x=""}')
      # shellcheck disable=SC2088
      case "$PWD" in
        $HOME*) printf '~/…/%s' "$last_two_dirs" ;;
        *) printf '…/%s' "$last_two_dirs" ;;
      esac
  fi
}

###########################################################
# Display current branch name, followed by symbols
# representing changes to the working copy
# Arguments:
#   $1 if ksh93, escape ! as !!
###########################################################
# shellcheck disable=SC2120
_branch_status() {
  ref=$(git symbolic-ref --quiet HEAD 2> /dev/null)
  case $? in        # See what the exit code is.
    0) ;;           # $ref contains the name of a checked-out branch.
    128) return ;;  # No Git repository here.
    # Otherwise, see if HEAD is in detached state.
    *) ref=$(git rev-parse --short HEAD 2> /dev/null) || return ;;
  esac
  printf ' (%s%s)' "${ref#refs/heads/}" "$(_branch_changes "$1")"
}

###########################################################
# Display symbols representing changes to the working copy
# Arguments:
#   $1 if ksh93, escape ! as !!
###########################################################
_branch_changes() {
  git_status=$(git status 2>&1)

  symbols=''

  case "$git_status" in
    *'renamed:'*) symbols=">${symbols}" ;;
  esac
  case "$git_status" in
    *'Your branch is ahead of'*) symbols="*${symbols}" ;;
  esac
  case "$git_status" in
    *'new file:'*) symbols="+${symbols}" ;;
  esac
  case "$git_status" in
    *'Untracked files'*) symbols="?${symbols}" ;;
  esac
  case "$git_status" in
    *'deleted:'*) symbols="x${symbols}" ;;
  esac
  case "$git_status" in
    *'modified:'*)
      if [ "$1" = 'ksh93' ]; then # In ksh93, a single `!` displays the command
        symbols="!!${symbols}"    # number, while two exclamation points are
      else                        # displayed as one exclamation point.
        symbols="!${symbols}"
      fi
    ;;
  esac

  [ "$symbols" ] && printf ' %s' "$symbols"
}

