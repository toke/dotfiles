#!/bin/sh

scriptname=$(basename $0)

GENERATOR="shortcuts"
EDITOR=${EDITOR-vi}
PAGER=${PAGER-cat}
GREP=${GREP-grep}
FZF=${FZF-fzf}

BM_CONFIG_FILE="${HOME}/.config/bmmaps"

if [ ! -f "$BM_CONFIG_FILE" ] ; then
cat > $BM_CONFIG_FILE <<EOF
# bm mapping config
# You can add comments to this file by using #
# Empty Lines are ignored

# <name>:<make>:<filename>
bm:bm:${HOME}/.config/bmmaps
files:shortcuts:${HOME}/.config/bmfiles
dirs:shortcuts:${HOME}/.config/bmdirs
EOF
    printf "Config file: %s created" $BM_CONFIG_FILE
fi

filemap=$(sed "s/\s*#.*$//;/^\$*$/d" "$BM_CONFIG_FILE")

getmap() {
    search=$1
    shift
    echo "${filemap}" | while IFS=":" read  type make file
    do
        # FIXME Posix handling with spaces
        if [ "$type" = "$search" ] ; then
            echo "$type '$make' $file"
        fi
    done
}

getmap bm

usage() {
    printf "%s - Bookmark (shortcuts) helper / generator\n\n" $scriptname
    printf "Usage:\n"
    printf "\t%s [command] [optionâ€¦]\tGeneral usage\n" $scriptname 
    printf "\t%s h|elp\t\tShows this help\n" $scriptname 
    printf "\t%s [a|show_all]\t\tShows all mappings\n" $scriptname 
    printf "\t%s g|grep\t\tGreps through all mappings\n" $scriptname 
    printf "\t%s e|edit <name>\tEdit a mapping\n" $scriptname 
    printf "\t%s s|show <name>\tShows a single mapping\n" $scriptname 
    printf "\t%s m|make [<name>]\tRegenerates the mappings\n" $scriptname 
    printf "\t%s f|fzf [%s command]\tInteractive select a mapping file, the optional\n" $scriptname $scriptname 
    printf "\t\t\t\t\`%s command\` is applied on the selection.\n" $scriptname
    printf "\nKnown types:\n\n"
    printf "<name>:<make>:<filename\n"
    IFS=''
    echo $filemap
    [ -z "$1" ] && printf "\n%s" $1 
    exit 1
}

show_all() {
    printf "Current Configuration:\n\n"

    echo "${filemap}" | while IFS=':' read -r type make filename ; do
        if [ -n "$filename" ] ; then
            printf "Type: \"%s\", file: \"%s\"\n\n" $type $filename
            cat "$filename"
        fi
    done
}

fzf_all() {
    # FIXME: this can be an alias easily no need to reimplemnt the wheel

    echo "${filemap}" | while IFS=':' read -r type make filename ; do
        if [ -f "$filename" ] ; then
            sed -e "s/^/${type}:/" $filename
        fi
    done
}

grep_all() {
    # FIXME: this can be an alias easily no need to reimplemnt the wheel
    
    pattern=$1
    shift
    echo "${filemap}" | while IFS=':' read -r type make filename ; do
        if [ -f "$filename" ] ; then
            matches=$($GREP $pattern "$filename")
            if [ -n "$matches" ] ; then
                printf "%s:\n%s\n" "$type" "$matches"
            fi
        fi
    done
}

edit() {
    if [ $# -eq 3 ] ; then
        $EDITOR "$3"
    else
        usage
    fi
}

show() {
    if [ $# -eq 3 ] ; then
        $PAGER "$3"
    else
        usage
    fi
}

make() {
    if [ $# -eq 1 ] ; then
        if [ $1 = 'bm' ] ; then
            echo "can not do anything right now with type bm"
            exit 3
        else 
            cmd=$(getmap $1 | cut -d' ' -f2,3)
            if [ -n "$cmd" ] ; then
                echo "Runing: $cmd"
                $cmd
            else
                echo "Command or mapping for type \"$1\" can not be found $cmd"
                exit 4
            fi
            err=$?
            [ $err -eq 0 ] && echo "Done" || echo "Something went wrong: $err"
        fi

    else
        ## FIXME - Old behaviour
        ## only for shortcuts
        echo "FIXME: running default generator: $GENRATOR"
        $GENERATOR && echo "Done"
    fi
}


[ $# -gt 0 ] && command=$1 && shift
case $command in
    h|help)
        usage
        ;;
    e|edit)
        edit $(getmap $1)
        ;;
    s|show)
        show $(getmap $1)
        ;;
    m|ake)
        make $@
        ;;
    g|grep)
        grep_all $@
        ;;
    f|fzf)
        if [ -z $1 ] ; then
            fzf_all | $FZF
        else
            fzf_all | $FZF | cut -d: -f1 | xargs bm $1
        fi
        ;;


    a|show_all|'')
        show_all | $PAGER
        ;;
    *)
        usage

esac


